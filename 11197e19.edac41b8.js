(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{133:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(n),m=r,u=s["".concat(i,".").concat(m)]||s[m]||d[m]||o;return n?a.a.createElement(u,c(c({ref:t},l),{},{components:n})):a.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(133)),i={title:"Topology"},c={unversionedId:"conv-topology",id:"conv-topology",isDocsHomePage:!1,title:"Topology",description:"Devices",source:"@site/docs/conv-topology.md",slug:"/conv-topology",permalink:"/docs/conv-topology",editUrl:"https://github.com/modelrailcontrol/MRC-documentation/blob/master/docs/conv-topology.md",version:"current",sidebar:"someSidebar",previous:{title:"Restrictions",permalink:"/docs/conv-restriction"},next:{title:"Devices",permalink:"/docs/conv-devices"}},p=[{value:"Devices",id:"devices",children:[]},{value:"Nodes",id:"nodes",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Base Topic",id:"base-topic",children:[]},{value:"Broadcast Channel",id:"broadcast-channel",children:[]}],l={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"devices"},"Devices"),Object(o.b)("p",null,"An instance of a physical piece of hardware is called a ",Object(o.b)("em",{parentName:"p"},"device"),".\nFor example, a car, an Arduino/ESP8266 or a coffee machine."),Object(o.b)("h2",{id:"nodes"},"Nodes"),Object(o.b)("p",null,"A ",Object(o.b)("em",{parentName:"p"},"device")," can expose multiple ",Object(o.b)("em",{parentName:"p"},"nodes"),".\nNodes are independent or logically separable parts of a device.\nFor example, a car might expose a ",Object(o.b)("inlineCode",{parentName:"p"},"wheels")," node, an ",Object(o.b)("inlineCode",{parentName:"p"},"engine")," node and a ",Object(o.b)("inlineCode",{parentName:"p"},"lights")," node."),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("p",null,"A ",Object(o.b)("em",{parentName:"p"},"node")," can have multiple ",Object(o.b)("em",{parentName:"p"},"properties"),".\nProperties represent basic characteristics of the node/device, often given as numbers or finite states.\nFor example the ",Object(o.b)("inlineCode",{parentName:"p"},"wheels")," node might expose an ",Object(o.b)("inlineCode",{parentName:"p"},"angle")," property.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"engine")," node might expose a ",Object(o.b)("inlineCode",{parentName:"p"},"speed"),", ",Object(o.b)("inlineCode",{parentName:"p"},"direction")," and ",Object(o.b)("inlineCode",{parentName:"p"},"temperature")," property.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"lights")," node might expose an ",Object(o.b)("inlineCode",{parentName:"p"},"intensity")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"color")," property."),Object(o.b)("h2",{id:"attributes"},"Attributes"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Devices, nodes and properties")," have specific ",Object(o.b)("em",{parentName:"p"},"attributes")," characterizing them.\nAttributes are represented by topic identifier starting with ",Object(o.b)("inlineCode",{parentName:"p"},"$"),".\nThe precise definition of attributes is important for the automatic discovery of devices following the MMRC convention."),Object(o.b)("p",null,"Examples: A device might have an ",Object(o.b)("inlineCode",{parentName:"p"},"IP")," attribute, a node will have a ",Object(o.b)("inlineCode",{parentName:"p"},"name")," attribute, and a property will have a ",Object(o.b)("inlineCode",{parentName:"p"},"unit")," attribute."),Object(o.b)("h2",{id:"base-topic"},"Base Topic"),Object(o.b)("p",null,"The root topic for this convention is ",Object(o.b)("inlineCode",{parentName:"p"},"mmrc/"),"."),Object(o.b)("h2",{id:"broadcast-channel"},"Broadcast Channel"),Object(o.b)("p",null,"MMRC defines a broadcast channel, so a controller is able to broadcast a message to all MMRC devices:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mmrc")," / ",Object(o.b)("inlineCode",{parentName:"li"},"$broadcast")," / ",Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"level")),": ",Object(o.b)("inlineCode",{parentName:"li"},"level")," is an arbitrary broadcast identifier.\nIt must adhere to the ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"#topic-ids"}),"ID format"),".")),Object(o.b)("p",null,"For example, you might want to broadcast an ",Object(o.b)("inlineCode",{parentName:"p"},"alert")," event with the alert reason as the payload.\nDevices are then free to react or not.\nIn our case, every buzzer of your home automation system would start buzzing."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'mmrc/$broadcast/alert \u2190 "Intruder detected"\n')),Object(o.b)("p",null,"Any other topic is not part of the MMRC convention."))}b.isMDXComponent=!0}}]);